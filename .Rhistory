(1/8)*(1/1000) * (60) * (60)
(1/8)*(1/1000) * (60) * (60) *90
(1/8)*(1/1000) * (60) * (60) *90
2.5 * (1/1000) * 60 * 60
(1/9)*(1/1000) * (60) * (60) *90
(1/10)*(1/1000) * (60) * (60) *90
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question1.txt")
View(data)
View(data)
names(data) = c('subject', 'group', 'RT')
View(data)
View(data)
data$group = factor(data$group)
#Testing Assumptions
par(mfcol = c(1,3))
hist(data$rt[data$group == 1])
hist(data$rt[data$group == 2])
hist(data$rt[data$group == 3])
data = read.table("sampleanovadata2.txt")
names(data) = c('subject', 'group', 'rt')
data$group = factor(data$group)
par(mfcol = c(1,4))
hist(data$rt[data$group == 1])
hist(data$rt[data$group == 2])
hist(data$rt[data$group == 3])
hist(data$rt[data$group == 4])
#Question 1
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
data$group = factor(data$group)
#Testing Assumptions
par(mfcol = c(1,4))
hist(data$rt[data$group == 1])
hist(data$rt[data$group == 2])
hist(data$rt[data$group == 3])
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
data = as.numeric(data)
#Testing Assumptions
par(mfcol = c(1,3))
hist(data$RT[data$group == 1])
hist(data$RT[data$group == 2])
hist(data$RT[data$group == 3])
for(counter in 1:3)
{
analysis = shapiro.test(data$RT[data$group == counter])
print(analysis)
}
library(car)
leveneTest(data$RT~data$group)
data$group = factor(data$group)
leveneTest(data$RT~data$group)
bartlett.test(data$RT~data$group)
data$group = factor(data$group)
bartlett.test(data$RT~data$group)
data = read.table("sampleanovadata2.txt")
names(data) = c('subject', 'group', 'rt')
data$group = factor(data$group)
leveneTest(data$rt~data$group)
boxplot(data$RT~data$group)
#Question 1
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
boxplot(data$RT~data$group)
par(mfcol = c(1,1))
#Question 1
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
data$group = factor(data$group)
#Testing Assumptions
#The groups are independent
#We can assume that the members of each group are randomly sampled and independent of each other
#Normality
for(counter in 1:3)
{
analysis = shapiro.test(data$RT[data$group == counter])
print(analysis)
}
#All p-values > 0.05. Assumption of normality is met
#Homogeneity
bartlett.test(data$RT~data$group)
#p < 0.05 so the assumption of homogeneity is not met.
#However, the ANOVA is consider a "robust" test that can still be run with this assumption not met
#And dealing with the violation of this assumption is "beyond the scope of this course"
#ANOVA
analysis = aov(data$rt~data$group)
summary(analysis)
analysis = aov(data$RT~data$group)
summary(analysis)
data = read.table("sampleanovadata2.txt")
names(data) = c('subject', 'group', 'rt')
data$group = factor(data$group)
analysis = aov(data$rt~data$group)
summary(analysis)
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
data$group = factor(data$group)
analysis = aov(data$RT~data$group)
summary(analysis)
TukeyHSD(analysis)
pairwise.t.test(data$RT, data$group, p.adjust = "bonf")
data = read.table("sampleanovadata2.txt")
names(data) = c('subject', 'group', 'rt')
data$group = factor(data$group)
TukeyHSD(analysis)
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
data$group = factor(data$group)
TukeyHSD(analysis)
pairwise.t.test(data$RT, data$group, p.adjust = "bonf")
data = read.table("sampleanovadata2.txt")
names(data) = c('subject', 'group', 'rt')
data$group = factor(data$group)
analysis = aov(data$rt~data$group)
summary(analysis)
TukeyHSD(analysis)
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
data$group = factor(data$group)
#Testing Assumptions
#The groups are independent
#We can assume that the members of each group are randomly sampled and independent of each other
#Normality
for(counter in 1:3)
{
analysis = shapiro.test(data$RT[data$group == counter])
print(analysis)
}
#All p-values > 0.05. Assumption of normality is met
#Homogeneity
bartlett.test(data$RT~data$group)
#p < 0.05 so the assumption of homogeneity is not met.
#However, the ANOVA is consider a "robust" test that can still be run with this assumption not met
#And dealing with the violation of this assumption is "beyond the scope of this course"
#ANOVA
analysis = aov(data$RT~data$group)
summary(analysis)
#F(2,57) = 4.731, p < 0.05
#There is a significant difference between the groups
#Post Hoc
TukeyHSD(analysis)
pairwise.t.test(data$RT, data$group, p.adjust = "bonf")
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
means = aggregate(data$RT, list(data$group), mean)
means = means$x
sds = aggregate(data$RT, list(data$group), sd)
sds = sds$x
cis = abs(qt(0.05, 19))*sds/sqrt(20))
bp = barplot(means)
arrows(bp, means-cis, bp, means + cis, angle = 90, code = 3, length = 0.5)
cis = abs(qt(0.05, 19)*sds/sqrt(20))
bp = barplot(means)
arrows(bp, means-cis, bp, means + cis, angle = 90, code = 3, length = 0.5)
cis = abs(qt(0.05, 19)*sds/sqrt(20))
bp = barplot(means)
arrows(bp, means-cis, bp, means + cis, angle = 90, code = 3, length = 0.5)
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
means = aggregate(data$RT, list(data$group), mean)
means = means$x
sds = aggregate(data$RT, list(data$group), sd)
sds = sds$x
cis = abs(qt(0.05, 19)*sds/sqrt(20))
bp = barplot(means)
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.5)
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("data.txt")
names(data) = c("group", "eeg", "rt")
data = read.table("sampleplotdata.txt")
names(data) = c("subject", "group", "rt")
means = aggregate(data$rt, list(data$group), mean)
means = means$x
sds = aggregate(data$rt, list(data$group), sd)
sds = sds$x
cis = abs(qt(0.05, 49)* sds/sqrt(50))
bp = barplot(means)
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.5)
cis = abs(qt(0.05, 19)*sds/sqrt(20))
bp = barplot(means)
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
means = aggregate(data$RT, list(data$group), mean)
means = means$x
sds = aggregate(data$RT, list(data$group), sd)
sds = sds$x
cis = abs(qt(0.05, 19)*sds/sqrt(20))
bp = barplot(means)
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.5)
bp = barplot(means, ylim = c(0,350))
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.5)
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 1)
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.05)
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 2)
arrows(bp, means-cis, bp, means+cis, angle = 45, code = 3, length = 2)
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 50)
bp = barplot(means, ylim = c(0,350))
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 50)
bp = barplot(means, ylim = c(0,350))
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 4, length = 0.25)
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 2, length = 0.25)
bp = barplot(means, ylim = c(0,350))
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 2, length = 0.25)
bp = barplot(means, ylim = c(0,350))
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
data = read.table("data.txt")
names(data) = c("group", "eeg", "rt")
View(data)
View(data)
data = read.table("sampleplotdata.txt")
names(data) = c("subject", "group", "rt")
means = aggregate(data$rt, list(data$group), mean)
means = means$x
View(data)
View(data)
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
means = aggregate(data$RT, list(data$group), mean)
means = means$x
sds = aggregate(data$RT, list(data$group), sd)
sds = sds$x
cis = abs(qt(0.05, 19)*sds/sqrt(20))
bp = barplot(means, ylim = c(0,350))
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
bp = barplot(means, ylim = c(0,310))
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
means = aggregate(data$RT, list(data$group), mean)
means = means$x
sds = aggregate(data$RT, list(data$group), sd)
sds = sds$x
cis = abs(qt(0.05, 19)*sds/sqrt(20))
bp = barplot(means, ylim = c(0,310), xlab = 'Age groups', ylab = 'Reaction Time (ms)', main = 'Reaction time for young (left), middle, and old (right) age groups')
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
bp = barplot(means, ylim = c(0,310), xlab = 'Age groups', ylab = 'Reaction Time (ms)', main = 'Reaction time for young (left), middle, and old (right) age groups', xgrid.at = 0)
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
means = aggregate(data$RT, list(data$group), mean)
means = means$x
sds = aggregate(data$RT, list(data$group), sd)
sds = sds$x
cis = abs(qt(0.05, 19)*sds/sqrt(20))
bp = barplot(means, ylim = c(0,310), xlab = 'Age groups', ylab = 'Reaction Time (ms)', main = 'Reaction time for young (left), middle, and old (right) age groups')
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question3.txt")
names(data) = c('subject', 'group', 'RT')
View(data)
View(data)
data = read.table("exam_question3.txt")
names(data) = c('subject', 'time', 'calories')
View(data)
View(data)
shapiro.test(data$calories[data$time == 1])
shapiro.test(data$calories[data$time == 2])
data = read.table("exam_question3.txt")
names(data) = c('subject', 'time', 'calories')
View(data)
View(data)
shapiro.test(data$calories[data$time == 1])
shapiro.test(data$calories[data$time == 2])
data = read.table("exam_question3.txt")
names(data) = c('subject', 'time', 'calories')
View(data)
View(data)
bartlett.test(data$calories~data$time)
analysis = t.test(data$calories~data$time, paired = TRUE)
print(analysis)
means = aggregate(data$calories, list(data$time), mean)
means = means$x
sds = aggregate(data2$calories, list(data2$time), sd)
sds = sds$x
cis_time1 = abs(qt(0.05, 19)*sds[1]/sqrt(20))
cis_time2 = abs(qt(0.05, 19)*sds[2]/sqrt(20))
library(ggplot2)
ggplot(aes(x = time, y= calories), data = data)+
stat_summary(fun = mean, geom = 'bar')+
stat_summary(fun.data = mean_cl_normal, geom = 'errorbar', width = 0.25)+
scale_y_continuous(expand = c(0,0))+
theme_classic()
library(ggplot2)
ggplot(aes(x = time, y= calories), data = data)+
stat_summary(fun = mean, geom = 'bar')+
stat_summary(fun.data = mean_cl_normal, geom = 'errorbar', width = 0.5)+
scale_y_continuous(expand = c(0,0))+
theme_classic()
cis = abs(qt(0.05, 19)*sds/sqrt(20))
data = read.table("exam_question3.txt")
names(data) = c('subject', 'time', 'calories')
data$time = factor(data$time)
#Testing assumptions
#Normality
shapiro.test(data$calories[data$time == 1])
shapiro.test(data$calories[data$time == 2])
#P-values > 0.05 for both time measures. Assumption of normality is met
#Homogeneity
bartlett.test(data$calories~data$time)
#p < 0.05 so the assumption of homogeneity is not met.
#Violating this assumption appears to matter if you have unequal group sizes.
#But since the groups sizes are the same, this test result can be ignored
analysis = t.test(data$calories~data$time, paired = TRUE)
print(analysis)
#Our analysis reveal that the caloric intake was different between the two times, t(19) = 12.793, p < 0.001
means = aggregate(data$calories, list(data$time), mean)
means = means$x
sds = aggregate(data2$calories, list(data2$time), sd)
sds = sds$x
cis = abs(qt(0.05, 19)*sds/sqrt(20))
sds = aggregate(data$calories, list(data$time), sd)
sds = sds$x
cis = abs(qt(0.05, 19)*sds/sqrt(20))
bp = barplot(means, ylim = c(0,2600), xlab = 'Time (days)', ylab = 'Caloric intake (kcal)', main = 'Mean caloric intake for day 1 (left) and day 2 (right) Reaction time for young (left)')
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
bp = barplot(means, ylim = c(0,2600), xlab = 'Time (days)', ylab = 'Caloric intake (kcal)', main = 'Mean caloric intake for day 1 (left) and day 2 (right) Reaction time for young (left)')
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
bp = barplot(means, ylim = c(0,2500), xlab = 'Time (days)', ylab = 'Caloric intake (kcal)', main = 'Mean caloric intake for day 1 (left) and day 2 (right) Reaction time for young (left)')
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
bp = barplot(means, ylim = c(0,2400), xlab = 'Time (days)', ylab = 'Caloric intake (kcal)', main = 'Mean caloric intake for day 1 (left) and day 2 (right) Reaction time for young (left)')
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.25)
bp = barplot(means, ylim = c(0,2500), xlab = 'Time (days)', ylab = 'Caloric intake (kcal)', main = 'Mean caloric intake for day 1 (left) and day 2 (right) Reaction time for young (left)')
arrows(bp, means-cis, bp, means+cis, angle = 90, code = 3, length = 0.50)
library(ggplot2)
ggplot(aes(x = time, y= calories), data = data)+
stat_summary(fun = mean, geom = 'bar')+
stat_summary(fun.data = mean_cl_normal, geom = 'errorbar', width = 0.5)+
scale_y_continuous(expand = c(0,0))+
theme_classic()
data = read.table("exam_question1.txt")
names(data) = c('subject', 'group', 'RT')
library(ggplot2)
ggplot(aes(x = group, y= RT), data = data)+
stat_summary(fun = mean, geom = 'bar')+
stat_summary(fun.data = mean_cl_normal, geom = 'errorbar', width = 0.5)+
scale_y_continuous(expand = c(0,0))+
theme_classic()
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question4.txt")
View(data)
View(data)
setwd("C:/Users/julie/GitHub/Stats")
data = read.table("exam_question4.txt")
names(data) = c('Participant', 'group', 'EEG')
shapiro.test(data$EEG)
analysis = t.test(data$EEG, mu = 0)
print(analysis)
mean = mean(data$EEG)
sd = sd(data$EEG)
CI = abs(qt(0.05, 19)*sd/sqrt(20))
LL_CI = mean - CI
UL_CI = mean + CI
data = read.table("data1.txt")
View(data)
View(data)
diffscores = data$V2 - data$V1
library(BEST)
results1 = BESTmcmc(diffscores)
plot(results1)
data = read.table("exam_question4.txt")
names(data) = c('Participant', 'group', 'EEG')
analysis = t.test(data$EEG, mu = 0)
print(analysis)
mean = mean(data$EEG)
sd = sd(data$EEG)
CI = abs(qt(0.05, 19)*sd/sqrt(20))
LL_CI = mean - CI
UL_CI = mean + CI
library(BEST)
results = BESTmcmc(data$EEG)
plot(results)
data = read.table("exam_question4.txt")
names(data) = c('Participant', 'group', 'EEG')
analysis = t.test(data$EEG, mu = 0)
print(analysis)
data = read.table("exam_question4.txt")
View(data)
View(data)
data = read.table("exam_question4.txt")
data = read.table("exam_question5.txt")
View(data)
View(data)
plot(data)
cor(data$V1, data$V2)
cor.test(data$V1, data$V2)
model = lm(data$V1~data$V2)
summary(model)
plot(data$V2~data$V1)
abline(lm(data$V2~data$V1))
data = read.table("exam_question4.txt")
names(data) = c('Participant', 'group', 'EEG')
analysis = t.test(data$EEG, mu = 0)
print(analysis)
mean = mean(data$EEG)
sd = sd(data$EEG)
CI = abs(qt(0.05, 19)*sd/sqrt(20))
LL_CI = mean - CI
UL_CI = mean + CI
library(BEST)
results = BESTmcmc(data$EEG)
plot(results)
library(BEST)
results = BESTmcmc(data$EEG, 0)
plot(results)
data = read.table("data1.txt")
diffscores = data$V2 - data$V1
mean(diffscores)
library(BEST)
results1 = BESTmcmc(diffscores)
plot(results1)
data = read.table("exam_question4.txt")
names(data) = c('Participant', 'group', 'EEG')
View(data)
View(data)
analysis = t.test(data$EEG, mu = 0)
print(analysis)
mean = mean(data$EEG)
mean(data$EEG)
sd(data$EEG)
abs(qt(0.05, 19)*sd/sqrt(20))
CI = abs(qt(0.05, 19)*sd/sqrt(20))
LL_CI = mean - CI
UL_CI = mean + CI
library(BEST)
results = BESTmcmc(data$EEG)
plot(results)
data = read.table("exam_question4.txt")
names(data) = c('Participant', 'group', 'EEG')
analysis = t.test(data$EEG, mu = 0)
print(analysis)
mean = mean(data$EEG)
sd = sd(data$EEG)
CI = abs(qt(0.05, 19)*sd/sqrt(20))
LL_CI = mean - CI
UL_CI = mean + CI
data = read.table("data1.txt")
diffscores = data$V2 - data$V1
mean = mean(diffscores)
sd = sd(diffscores)
CI = abs(qt(0.05, 19)*sd/sqrt(20))
LL_CI = mean - CI
UL_CI = mean + CI
library(BEST)
results1 = BESTmcmc(diffscores)
plot(results1)
